#include <windows.h>
#include <GL/glut.h>
#include <iostream>
#include <vector>
#include <cmath>
#define SCR_HT 480
using namespace std;
vector<pair<int,int> > points;
int pointno=0;
static void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0,0,1);
    //glPointSize(5.0);
    //glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
    glBegin(GL_LINES);
        glVertex2f(0,0);
        glVertex2f(130.0,0);

    glEnd();
    glFlush();
}
void mouse_handling_function_name(int button,int state,int x,int y)
{
    if (button==GLUT_LEFT && state==GLUT_DOWN)
    {
        y=SCR_HT - y;
        pointno++;
        cout<<"("<<x<<","<<y<<")"<<endl;
        points.push_back(make_pair(x,y));
        //glPointSize(5.0);
        glBegin(GL_POINTS);
            glVertex2f(x,y);
        glEnd();
	glFlush();
        }
    }
}
void init()
{
    glClearColor(1,1,1,1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,640,0,480);
}
int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    //GLUT_DOUBLE | GLUT_DEPTH for 3d, for 2d only glut_single is enough
    glutCreateWindow("GLUT Shapes");
    glutDisplayFunc(display);
    init();
    glutMouseFunc(mouse_handling_function_name);

    glutMainLoop();

    return EXIT_SUCCESS;
}




